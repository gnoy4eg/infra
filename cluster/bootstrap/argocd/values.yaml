argo-cd:
  repoServer:
    serviceAccount:
      create: true
      name: argocd-repo-server
      automountServiceAccountToken: true
    volumeMounts:
      - name: custom-tools
        mountPath: /usr/local/bin/argocd-lovely-plugin
        subPath: argocd-lovely-plugin
      - name: custom-tools
        mountPath: /usr/local/bin/argocd-vault-plugin
        subPath: argocd-vault-plugin
    volumes:
      - name: custom-tools
        emptyDir: {}
    initContainers:
      - name: argocd-lovely-plugin-download
        image: ghcr.io/crumbhole/argocd-lovely-plugin:0.3.3
        imagePullPolicy: Always
        volumeMounts:
          - mountPath: /custom-tools
            name: custom-tools
      - name: download-tools
        image: alpine:3.15
        command: [sh, -c]
        env:
          - name: AVP_VERSION
            value: "1.10.1"
        args:
          - >-
            wget -O argocd-vault-plugin
            https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v${AVP_VERSION}/argocd-vault-plugin_${AVP_VERSION}_linux_amd64 &&
            chmod +x argocd-vault-plugin &&
            mv argocd-vault-plugin /custom-tools/
        volumeMounts:
          - mountPath: /custom-tools
            name: custom-tools
    env:
      - name: VAULT_ADDR
        value: http://vault.vault:8200
      - name: AVP_TYPE
        value: vault
      - name: AVP_AUTH_TYPE
        value: k8s
      - name: AVP_K8S_ROLE
        value: argocd-repo-server
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  server:
    config:
      url: https://argocd.k8s.devmem.ru
      configManagementPlugins: |
        - name: argocd-lovely-plugin
          generate:
            command: ["argocd-lovely-plugin"]
        - name: argocd-vault-plugin-helm
          init:
            command: ["sh", "-c"]
            args: ["helm dependency build || true"]
          generate:
            command: ["sh", "-c"]
            args: ["echo \"$HELM_VALUES\" | helm template . --name-template $ARGOCD_APP_NAME --namespace $ARGOCD_APP_NAMESPACE $HELM_ARGS -f - | argocd-vault-plugin generate -"]
        - name: kustomized-helm
          init:
            command: ["sh", "-c"]
            args: ["helm dependency build || true"]
          generate:
            command: ["sh", "-c"]
            args: ["echo \"$HELM_VALUES\" | helm template . --name-template $ARGOCD_APP_NAME --namespace $ARGOCD_APP_NAMESPACE $HELM_ARGS -f - > all.yaml && kustomize build"]
        - name: helm
          init:
            command: ["sh", "-c"]
            args: ["helm dependency build || true"]
          generate:
            command: ["sh", "-c"]
            args: ["echo \"$HELM_VALUES\" | helm template . --name-template $ARGOCD_APP_NAME --namespace $ARGOCD_APP_NAMESPACE $HELM_ARGS -f -"]
        - name: kustomize
          generate:
            command: ["sh", "-c"]
            args: ["kustomize build ."]
      statusbadge.enabled: "true"
      resource.customizations.health.argoproj.io_Application: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            if obj.status.health.message ~= nil then
              hs.message = obj.status.health.message
            end
          end
        end
        return hs
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/ssl-passthrough: "true"
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      ingressClassName: nginx
      https: true
      hosts:
        - argocd.k8s.devmem.ru
      tls:
        - hosts:
            - argocd.k8s.devmem.ru
          secretName: argocd-server-tls
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  controller:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  applicationSet:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  notifications:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  dex:
    enabled: false
